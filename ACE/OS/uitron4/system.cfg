/*************************************/
/* Sample configuration file         */
/*************************************/

INCLUDE("demo_itron.h");

#include "serial.cfg"

#define STACK_SIZE 1024


CRE_TSK(ID_MAIN_TASK, 			{TA_HLNG|TA_ACT, ID_MAIN_TASK,				main_task, 				15, STACK_SIZE, NULL});
CRE_TSK(ID_MUSB_TASK, 			{TA_HLNG, ID_MUSB_TASK, 				musb_task, 				 8, STACK_SIZE, NULL});
CRE_TSK(ID_LINE_TASK, 			{TA_HLNG, ID_LINE_TASK, 				line_task, 				 3, STACK_SIZE, NULL});
CRE_TSK(ID_FEED_TASK, 			{TA_HLNG, ID_FEED_TASK, 				feed_task, 				 3, STACK_SIZE, NULL});
CRE_TSK(ID_STACKER_TASK, 		{TA_HLNG, ID_STACKER_TASK, 			stacker_task, 			 3, STACK_SIZE, NULL});
CRE_TSK(ID_DISCRIMINATION_TASK, {TA_HLNG, ID_DISCRIMINATION_TASK, 	discrimination_task,	 3, STACK_SIZE, NULL});
CRE_TSK(ID_SENSOR_TASK, 		{TA_HLNG, ID_SENSOR_TASK, 			sensor_task, 			 5, STACK_SIZE, NULL});
CRE_TSK(ID_TIMER_TASK, 			{TA_HLNG, ID_TIMER_TASK, 			timer_task, 			 5, STACK_SIZE, NULL});
CRE_TSK(ID_DISPLAY_TASK, 		{TA_HLNG, ID_DISPLAY_TASK, 			display_task, 			 5, STACK_SIZE, NULL});
CRE_TSK(ID_CENTERING_TASK, 		{TA_HLNG, ID_CENTERING_TASK, 		centering_task, 		 8, STACK_SIZE, NULL});
CRE_TSK(ID_APB_TASK, 			{TA_HLNG, ID_APB_TASK, 				apb_task, 				 3, STACK_SIZE, NULL});
CRE_TSK(ID_MOTOR_TASK, 			{TA_HLNG, ID_MOTOR_TASK, 			motor_task, 			 3, STACK_SIZE, NULL});
CRE_TSK(ID_IDLE_TASK, 			{TA_HLNG, ID_IDLE_TASK, 				idle_task, 				 3, STACK_SIZE, NULL});
CRE_TSK(ID_ERRDISP_TASK, 		{TA_HLNG, ID_ERRDISP_TASK, 			errdisp_task, 			16, STACK_SIZE, NULL});
CRE_TSK(ID_SUBCPU_TASK, 		{TA_HLNG, ID_SUBCPU_TASK, 			subcpu_task, 			 3, STACK_SIZE, NULL});
CRE_TSK(ID_ICB_TASK, 			{TA_HLNG, ID_ICB_TASK, 				icb_task, 				 3, STACK_SIZE, NULL});
CRE_TSK(ID_DLINE_TASK, 			{TA_HLNG, ID_DLINE_TASK, 			dline_task, 			 3, STACK_SIZE, NULL});





CRE_FLG(ID_SENSOR_FLAG, 		{TA_TFIFO|TA_CLR|TA_WSGL, 0});// 待ちからの解除時、イベントフラグのビットパターン全解除
CRE_FLG(ID_FEED_CTRL_FLAG, 		{TA_TFIFO|TA_CLR|TA_WSGL, 0});
CRE_FLG(ID_STACKER_CTRL_FLAG,	{TA_TFIFO|TA_CLR|TA_WSGL, 0});
CRE_FLG(ID_CENTERING_CTRL_FLAG, {TA_TFIFO|TA_CLR|TA_WSGL, 0});
CRE_FLG(ID_APB_CTRL_FLAG, 		{TA_TFIFO|TA_CLR|TA_WSGL, 0});
CRE_FLG(ID_UART_TX_FLAG, 		{TA_TFIFO|TA_CLR|TA_WSGL, 0});
CRE_FLG(ID_SUBCPU_CTRL_FLAG, 	{TA_TFIFO|TA_CLR|TA_WSGL, 0});
CRE_FLG(ID_ICB_CTRL_FLAG, 		{TA_TFIFO|TA_CLR|TA_WSGL, 0});




CRE_SEM(ID_SEM1, {TA_TFIFO, 0, 10});

CRE_SEM(ID_TRACE_SEM, {TA_TFIFO, 0, 10});




CRE_DTQ(ID_UART_RX_DTQ, 		{TA_TFIFO, 10, NULL});
CRE_DTQ(ID_UART_RX_SUBCPU_DTQ, 	{TA_TFIFO, 10, NULL});
CRE_DTQ(ID_UART_ICB_RX_DTQ, 	{TA_TFIFO, 10, NULL});




CRE_MBX(ID_MAIN_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_MUSB_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_LINE_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_FEED_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_STACKER_MBX, 		{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_DISCRIMINATION_MBX, 	{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_SENSOR_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_TIMER_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_DISPLAY_MBX, 		{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_CENTERING_MBX, 		{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_APB_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_MOTOR_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_IDLE_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_ERRDISP_MBX, 		{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_SUBCPU_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_ICB_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});
CRE_MBX(ID_DLINE_MBX, 			{TA_TFIFO|TA_MFIFO, 10, NULL});



CRE_MPF(ID_MBX_MPF, 		{TA_TFIFO, 16, MSG_PACKET, NULL});
CRE_MPF(ID_MBX_MAIN_MPF, 	{TA_TFIFO, 16, MSG_PACKET, NULL});


CRE_CYC(ID_TIMER_1MS_CYC,	{TA_HLNG, NULL, timer_1ms_cyc, 	1, 1});
CRE_CYC(ID_TIMER_10MS_CYC,	{TA_HLNG, NULL, timer_10ms_cyc, 10, 1});
CRE_CYC(ID_TIMER_100MS_CYC,	{TA_HLNG, NULL, timer_100ms_cyc, 100, 1});

