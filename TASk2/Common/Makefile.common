MK:=mkdir
RM:=rm -r

DEBUG ?= 0


ifneq ($(DEBUG),1)
NO_ECHO=@
else
NO_ECHO=
endif


ifneq (,$(filter clean, $(MAKECMDGOALS))) # clean existed

OTHERS:=$(filter-out clean, $(MAKECMDGOALS))

ifeq (,$(OTHERS))
.PHONY: clean
clean:
	$(NO_ECHO)echo clean build
	$(NO_ECHO)$(RM) $(BUILD_DIR)
else
$(info $(OTHERS) is not supported)
$(error Stop.)
endif

else   # not clean 


###### TOOLCHAIN ########

PLATFORM_SUFFIX := $(if $(filter Windows%,$(OS)),windows,posix)
TOOLCHAIN_CONFIG_FILE := $(MAKECOMMON_DIR)/Makefile.$(PLATFORM_SUFFIX)
include $(TOOLCHAIN_CONFIG_FILE)

# $1 path
define quote
'$(subst ','\'',$(1))'
endef

# Toolchain commands
CC      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-gcc)
CXX     := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-c++)
AS      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-as)
AR      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ar) -r
LD      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-ld)
NM      := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-nm)
OBJDUMP := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objdump)
OBJCOPY := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-objcopy)
SIZE    := $(call quote,$(GNU_INSTALL_ROOT)$(GNU_PREFIX)-size)
$(if $(shell $(CC) --version),,$(info Cannot find: $(CC).) \
  $(info Please set values in: "$(abspath $(TOOLCHAIN_CONFIG_FILE))") \
  $(info according to the actual configuration of your system.) \
  $(error Cannot continue))

#########################


# $1 : target name
# $2 : source file
# $3 : object file
define bind_object_with_src
$(eval $(3) := $(2))\
$(eval $(3)_TGT := $(1))\
$(eval $(3) : Makefile | $(dir $(2)).)
endef


# $1 : target 
# $2 : flag 
define target_specifies
$($(addsuffix _$(strip $(1)), $(2)))
endef

# $1 : target name
# $2 : source files
define get_object_file
$(foreach src_file, $(2),\
		$(eval obj_file := $(get_object_file_names ,$(src_file), $(1)))\
		$(eval DEPENDENCES += $(obj_file:%.o=%.d))\
		$(call bind_object_with_src ,$(1), $(src_file), $(obj_file))\
		$(obj_file)\
		)
endef

# $1 : include folder
define get_inc_path
$(foreach inc_folder, $(1), -I$(inc_folder))
endef


# $1 : target name
# $2 : output file
define prepare_build
$(eval DEPENDENCES:=)\
$(eval $(2) : $(call get_object_file, $(1), \
				$(SRC_FILES) $(call target_specifies, $(1), SRC_FILES)))\
$(eval -include $(DEPENDENCES))\
$(eval INC_PATH_$(strip $(1)):= \
	$(call get_inc_path, \
		$(INC_FOLDER) $(call target_specifies, $(1), INC_FOLDER)))
endef


#
#
# $1 : target name
define define_targets
$(eval OUTPUT_FILES:=$(BUILD_DIR)/$(strip $(1)))\
$(eval $(1): $(OUTPUT_FILE).out $(OUTPUT_FILE).bin $(OUTPUT_FILE).hex \
		; @echo DONE $(1))\
$(call prepare_build, $(1), $(OUTPUT_FILE).out)
endef



.PHONY: $(TARGETS) all

all : $(TARGETS)

$(BUILD_DIR):
	$(MK) $@
$(BUILD_DIR)/%/.: | $(BUILD_DIR)
	cd $(BUILD_DIR) && $(MK) $*






endif 








